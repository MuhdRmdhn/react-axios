{"ast":null,"code":"import React,{useState}from'react';import mockAPI from'./api/mockapi';import Table from'./components/Table';import AreaForecast from'./components/AreaForecast';import styles from'./components/Button.module.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){// State variables to manage forecasts, area-specific forecasts, loading state, and error messages.\nconst[forecasts,setForecasts]=useState([]);const[areaForecast,setAreaForecast]=useState(\"\");const[loading,setLoading]=useState(false);const[error,setError]=useState(\"\");// Function to fetch all weather forecasts\nconst apiGetAll=async()=>{setLoading(true);setError(\"\");// Reset any previous error messages\ntry{const response=await mockAPI.get('/two-hr-forecast');console.log(\"API response:\",response.data);// Log the entire response\n// Check if the response contains data and items\nif(response.status===200&&response.data.data&&response.data.data.items){const items=response.data.data.items;if(items.length>0&&items[0].forecasts){setForecasts(items[0].forecasts);}else{setError(\"No forecasts available or unexpected data structure.\");console.error(\"Unexpected data structure:\",response.data);}}else{setError(\"No data available or unexpected response structure.\");console.error(\"Unexpected response structure:\",response.data);}}catch(error){console.error(\"Error fetching data:\",error);// Log the error\nsetError(\"Failed to fetch data. Please try again later.\");// Set error message for request failure\n}finally{setLoading(false);// Set loading state to false\n}};// Function to fetch forecast for a specific area\nconst apiGet=async area=>{setLoading(true);// Set loading state to true\nsetError(\"\");// Reset any previous error messages\ntry{const response=await mockAPI.get('/two-hr-forecast');if(response.status===200&&response.data.data&&response.data.data.items.length>0){const forecast=response.data.data.items[0].forecasts.find(item=>item.area.toLowerCase()===area.toLowerCase());if(forecast){setAreaForecast(\"The forecast in \".concat(area,\" is \").concat(forecast.forecast));}else{setAreaForecast(\"No forecast found for \".concat(area,\".\"));}}else{setError(\"No data available or unexpected response structure.\");console.error(\"Unexpected response structure:\",response.data);}}catch(error){console.error(\"Error fetching forecast for area:\",error);setAreaForecast(\"Failed to fetch forecast. Please try again later.\");}finally{setLoading(false);// Set loading state to false\n}};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(AreaForecast,{getForecast:apiGet,areaForecast:areaForecast}),/*#__PURE__*/_jsx(\"button\",{className:styles.button,onClick:apiGetAll,children:\"Load all weather forecasts\"}),loading&&/*#__PURE__*/_jsx(\"p\",{children:\"Loading...\"}),error&&/*#__PURE__*/_jsx(\"p\",{children:error}),/*#__PURE__*/_jsx(Table,{list:forecasts})]});}export default App;","map":{"version":3,"names":["React","useState","mockAPI","Table","AreaForecast","styles","jsx","_jsx","jsxs","_jsxs","App","forecasts","setForecasts","areaForecast","setAreaForecast","loading","setLoading","error","setError","apiGetAll","response","get","console","log","data","status","items","length","apiGet","area","forecast","find","item","toLowerCase","concat","className","children","getForecast","button","onClick","list"],"sources":["/Users/muhammadramadhanrahmat/Desktop/SCTP/React/6m-software-2.9-react-axios/code/final/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport mockAPI from './api/mockapi';\nimport Table from './components/Table';\nimport AreaForecast from './components/AreaForecast';\nimport styles from './components/Button.module.css';\n\nfunction App() {\n  // State variables to manage forecasts, area-specific forecasts, loading state, and error messages.\n  const [forecasts, setForecasts] = useState([]);\n  const [areaForecast, setAreaForecast] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  // Function to fetch all weather forecasts\n  const apiGetAll = async () => {\n    setLoading(true);\n    setError(\"\"); // Reset any previous error messages\n    try {\n      const response = await mockAPI.get('/two-hr-forecast');\n      console.log(\"API response:\", response.data); // Log the entire response\n  \n      // Check if the response contains data and items\n      if (response.status === 200 && response.data.data && response.data.data.items) {\n        const items = response.data.data.items;\n        if (items.length > 0 && items[0].forecasts) {\n          setForecasts(items[0].forecasts);\n        } else {\n          setError(\"No forecasts available or unexpected data structure.\");\n          console.error(\"Unexpected data structure:\", response.data);\n        }\n      } else {\n        setError(\"No data available or unexpected response structure.\");\n        console.error(\"Unexpected response structure:\", response.data);\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error); // Log the error\n      setError(\"Failed to fetch data. Please try again later.\"); // Set error message for request failure\n    } finally {\n      setLoading(false); // Set loading state to false\n    }\n  };\n\n  // Function to fetch forecast for a specific area\n  const apiGet = async (area) => {\n    setLoading(true); // Set loading state to true\n    setError(\"\"); // Reset any previous error messages\n    try {\n      const response = await mockAPI.get('/two-hr-forecast');\n      if (response.status === 200 && response.data.data && response.data.data.items.length > 0) {\n        const forecast = response.data.data.items[0].forecasts.find(\n          (item) => item.area.toLowerCase() === area.toLowerCase()\n        );\n        if (forecast) {\n          setAreaForecast(`The forecast in ${area} is ${forecast.forecast}`);\n        } else {\n          setAreaForecast(`No forecast found for ${area}.`);\n        }\n      } else {\n        setError(\"No data available or unexpected response structure.\");\n        console.error(\"Unexpected response structure:\", response.data);\n      }\n    } catch (error) {\n      console.error(\"Error fetching forecast for area:\", error);\n      setAreaForecast(\"Failed to fetch forecast. Please try again later.\");\n    } finally {\n      setLoading(false); // Set loading state to false\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {/* Component to handle area-specific forecast */}\n      <AreaForecast getForecast={apiGet} areaForecast={areaForecast} />\n      {/* Button to load all weather forecasts */}\n      <button className={styles.button} onClick={apiGetAll}>\n        Load all weather forecasts\n      </button>\n      {/* Display loading message if loading */}\n      {loading && <p>Loading...</p>}\n      {/* Display error message if an error occurred */}\n      {error && <p>{error}</p>}\n      {/* Display forecasts data in a table */}\n      <Table list={forecasts} />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,OAAO,KAAM,eAAe,CACnC,MAAO,CAAAC,KAAK,KAAM,oBAAoB,CACtC,MAAO,CAAAC,YAAY,KAAM,2BAA2B,CACpD,MAAO,CAAAC,MAAM,KAAM,gCAAgC,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEpD,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb;AACA,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAACY,YAAY,CAAEC,eAAe,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CACpD,KAAM,CAACc,OAAO,CAAEC,UAAU,CAAC,CAAGf,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACgB,KAAK,CAAEC,QAAQ,CAAC,CAAGjB,QAAQ,CAAC,EAAE,CAAC,CAEtC;AACA,KAAM,CAAAkB,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5BH,UAAU,CAAC,IAAI,CAAC,CAChBE,QAAQ,CAAC,EAAE,CAAC,CAAE;AACd,GAAI,CACF,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAlB,OAAO,CAACmB,GAAG,CAAC,kBAAkB,CAAC,CACtDC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAEH,QAAQ,CAACI,IAAI,CAAC,CAAE;AAE7C;AACA,GAAIJ,QAAQ,CAACK,MAAM,GAAK,GAAG,EAAIL,QAAQ,CAACI,IAAI,CAACA,IAAI,EAAIJ,QAAQ,CAACI,IAAI,CAACA,IAAI,CAACE,KAAK,CAAE,CAC7E,KAAM,CAAAA,KAAK,CAAGN,QAAQ,CAACI,IAAI,CAACA,IAAI,CAACE,KAAK,CACtC,GAAIA,KAAK,CAACC,MAAM,CAAG,CAAC,EAAID,KAAK,CAAC,CAAC,CAAC,CAACf,SAAS,CAAE,CAC1CC,YAAY,CAACc,KAAK,CAAC,CAAC,CAAC,CAACf,SAAS,CAAC,CAClC,CAAC,IAAM,CACLO,QAAQ,CAAC,sDAAsD,CAAC,CAChEI,OAAO,CAACL,KAAK,CAAC,4BAA4B,CAAEG,QAAQ,CAACI,IAAI,CAAC,CAC5D,CACF,CAAC,IAAM,CACLN,QAAQ,CAAC,qDAAqD,CAAC,CAC/DI,OAAO,CAACL,KAAK,CAAC,gCAAgC,CAAEG,QAAQ,CAACI,IAAI,CAAC,CAChE,CACF,CAAE,MAAOP,KAAK,CAAE,CACdK,OAAO,CAACL,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAAE;AAC9CC,QAAQ,CAAC,+CAA+C,CAAC,CAAE;AAC7D,CAAC,OAAS,CACRF,UAAU,CAAC,KAAK,CAAC,CAAE;AACrB,CACF,CAAC,CAED;AACA,KAAM,CAAAY,MAAM,CAAG,KAAO,CAAAC,IAAI,EAAK,CAC7Bb,UAAU,CAAC,IAAI,CAAC,CAAE;AAClBE,QAAQ,CAAC,EAAE,CAAC,CAAE;AACd,GAAI,CACF,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAlB,OAAO,CAACmB,GAAG,CAAC,kBAAkB,CAAC,CACtD,GAAID,QAAQ,CAACK,MAAM,GAAK,GAAG,EAAIL,QAAQ,CAACI,IAAI,CAACA,IAAI,EAAIJ,QAAQ,CAACI,IAAI,CAACA,IAAI,CAACE,KAAK,CAACC,MAAM,CAAG,CAAC,CAAE,CACxF,KAAM,CAAAG,QAAQ,CAAGV,QAAQ,CAACI,IAAI,CAACA,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC,CAACf,SAAS,CAACoB,IAAI,CACxDC,IAAI,EAAKA,IAAI,CAACH,IAAI,CAACI,WAAW,CAAC,CAAC,GAAKJ,IAAI,CAACI,WAAW,CAAC,CACzD,CAAC,CACD,GAAIH,QAAQ,CAAE,CACZhB,eAAe,oBAAAoB,MAAA,CAAoBL,IAAI,SAAAK,MAAA,CAAOJ,QAAQ,CAACA,QAAQ,CAAE,CAAC,CACpE,CAAC,IAAM,CACLhB,eAAe,0BAAAoB,MAAA,CAA0BL,IAAI,KAAG,CAAC,CACnD,CACF,CAAC,IAAM,CACLX,QAAQ,CAAC,qDAAqD,CAAC,CAC/DI,OAAO,CAACL,KAAK,CAAC,gCAAgC,CAAEG,QAAQ,CAACI,IAAI,CAAC,CAChE,CACF,CAAE,MAAOP,KAAK,CAAE,CACdK,OAAO,CAACL,KAAK,CAAC,mCAAmC,CAAEA,KAAK,CAAC,CACzDH,eAAe,CAAC,mDAAmD,CAAC,CACtE,CAAC,OAAS,CACRE,UAAU,CAAC,KAAK,CAAC,CAAE;AACrB,CACF,CAAC,CAED,mBACEP,KAAA,QAAK0B,SAAS,CAAC,KAAK,CAAAC,QAAA,eAElB7B,IAAA,CAACH,YAAY,EAACiC,WAAW,CAAET,MAAO,CAACf,YAAY,CAAEA,YAAa,CAAE,CAAC,cAEjEN,IAAA,WAAQ4B,SAAS,CAAE9B,MAAM,CAACiC,MAAO,CAACC,OAAO,CAAEpB,SAAU,CAAAiB,QAAA,CAAC,4BAEtD,CAAQ,CAAC,CAERrB,OAAO,eAAIR,IAAA,MAAA6B,QAAA,CAAG,YAAU,CAAG,CAAC,CAE5BnB,KAAK,eAAIV,IAAA,MAAA6B,QAAA,CAAInB,KAAK,CAAI,CAAC,cAExBV,IAAA,CAACJ,KAAK,EAACqC,IAAI,CAAE7B,SAAU,CAAE,CAAC,EACvB,CAAC,CAEV,CAEA,cAAe,CAAAD,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}